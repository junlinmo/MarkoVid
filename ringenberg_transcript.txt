repetitiveCigarettes are your phone?All right. Good morning, everybody. My son told me to wear a blue Android shirt today. So I did. Alright, I actually have lots of these Android shirts and plucking for years. The first part is the Matlab mandelbrot set. It's a really interesting lecture cuz I show you how to do some really cool stuff for the graphics and and different things in a gooey both of the stuff from today's lecture on the mantle stats not really going to be a focus of the exam because it's hard to ask questions on the exam for you have to write gooeys and and drop lots and everything like that. But a lot of the code that you're going to see is helpful in you know, Showing you some some basics of how to do like a specific example in Matlab. They're going to spend the last part of the lecture talking about the other team packs project is coming up the last project. It's due went on Monday or something or Sunday Monday. Okay, it's due on Monday. The intent is for you to spend Tuesday and lab next week or something. If you haven't already gotten a team to talk to to get a team. So that's why that the product is due Monday night. I'm giving you so late. Basically the last second we'll talk more about that later today. Alright, so this is where we're going today. This is a graph of the mandelbrot set. What I'm going to do is I'm going to start off of this is by the pseudo colored spots of this actually three dimensions of data here. We have the X & Y coordinates and then you have the the third dimension as a color. We're going to first go through just the basics of where the man. Came from again. This this isn't a math class. So I'm just going to show you the basics of it. But what I really want to focus on since this definitely is a programming class is how we can use programming to you no start-up the man over to to basically create the mandelbrot set and data and then how to prevent it using the pseudo color plot tool. OK Google what's called a fractal and these things are really interesting in particular in in like physics because they're used in things like chaos theory and they also help to describe man-made systems. Have this really interesting principle of what's called self-similarity. So if you look at this picture, you can actually see that that this General shape with like this big like blob with a smaller blobs in a smaller blob is sort of repeated like maybe up here and various things and as I zoom into this image using both Matlab and also some images that were generated on the internet are for the internet you'll see that this General shape of the mandelbrot set has this property of self-similarity where things sort of repeat themselves as you zoom in farther and farther into it. All right. So upset in general is generator for the very simple equation. That's the simple equation right there. Right and what this equation does it generate a series of values given some initial value for Z + a constant. Alright, so if for example we picked value for see that was equal to one for the constant value and then we started off the initials E sub M at the value of 0 the next value in the sequence for Z of m + 1 would be one and then it would be 1 squared + 1 which is two and then 2 squared plus 1 verses 5 and so on and so forth okay value for see this equal to 0.1 and we can start off with that initial Z value equal to zero then the values go from 0 to 0.1 0.1 one and someone okay. So that's where these values for the the Z. Series of values come from all right, so in the mandelbrot set what we do here. Is we determine the value of a point in this little grass too far back of with all the stuff in that picture? Okay, but how many iterations it takes for the value in the series to grow greater than 2K? And then we divide that by the total number of iterations that we are going to allow the series to run for. All right. So if that point never grows greater than 2 and the number of iterations that we give to the series it's considered to be what I found in value. However, if it grows very quickly and it is in that gets it goes past 2 in a relatively small number of iterations compared to the total number that's considered a value that escapes quickly. Okay. So with with these sequences of values, you can see that the first one when she was he the one that escapes rather quickly credit only takes 3 duration, sorry for Innovations for it to escape and go beyond to what for when we picked 0.14 the value. See, I never actually got greater than two at least in the the total number of iterations that we gave it here. Alright, so in our example here and if we were to give one the man of God said if we gave the value of c equal the one that's going to give a final value of 0.4. If we assumed they were going to have a total of 10 in radians that we give to the simulation or did we give to the equation to essentially iterate over? Okay. So we say you have 10 days to get above to if you don't let me take you know, basically 10/10 we get one which is what time of 0.1 is the time of one took for iterations to get greater and we have a total of 10 and relations for it to to try to do so, so that's 4/10 0.42. Those are two different examples here. For the mandelbrot set this by the way is not how the mandelbrot set is actually going to be generating those cool pictures for the man. We're going to do this with complex numbers. That's for the trip comes in for this. I no idea who like how it was figured out but I do know how to turn into code. All right. So the way it works is that we start off with our plane of values the xy-plane and every point in that plane has the real value and the real value is provided by the x-axis. All right in an imaginary value provided by the y-axis. So if you can recall back to when you did complex numbers back in the math class or whatever complex numbers always have a real Parton imaginary part. So there a complex number could be like 4 + 6 I write 4 as the real part and then six I is the imaginary part where I is the square root of -1. Alright, and it's been so long since I use that stuff and I don't even remember what you use that stuff for some of the most of you probably do cuz you're closer, but it's been like two decades. Since I use complex number, so I don't even remember can anybody explain to me briefly what complex numbers are used for? nobody knows Okay, that's fine. Cuz I got nothing so anything is better than nothing. Okay. So yeah. Okay, the charge of a capacitor overtime uses complex. I was okay. So it has to do with electricity and and quantum mechanics and stuff that I never actually study. So that's probably why so I guess I'm the only thing that I can remember but you know from 20 plus years ago is is learning how to like do math with complex numbers, but I don't think you know based on the way to school at least in my school was taught that they gave us a practical use for them. They're just like yours all you multiply two complex numbers together. And here's how you add them. Like I can still do that, but I'm not exactly sure like other than what we discussed like practical applications for it cuz I never had to use it for that. Anyways, hopefully everybody knows what a complex number is right and where these values for each of these points come from another condition for to stop either. Asian is going to be when the absolute value of a number is greater than 2 and the absolute value of that complex number. Pregnant too. Alright, so to make this at the first thing we have to do is we have to write a function that takes two inputs. The first one is a matrix were going to call and see and each of the elements and that Matrix is a complex number case. We have this this Matrix is two dimensional Matrix and it's filled with a bunch of complex numbers and then it also have to take in a number of iterations. Okay, and then we have to make sure that like we did before the example that the initial values for Z when we start doing these iterations for each value in CRC or sorry for each of the values receipt for each of those C complex numbers are set to zero I know it will do as well just have a loop that goes through and just repeatedly applies that equation to each of those values of Z. Okay. So Z of M starts at zero for every single one of the points on that that 2D Matrix and then see is going to be all of these different complex numbers that are formed by the x value giving them. Real number and then the Y value given imaginary number. Alright, so here's the basic format for how that's going to work. The function called mandelbrot equation function. The ultimate function is actually only called mandelbrot Draw because we wanted to draw that picture but this is the sort of core of the whole thing. You can see that it takes those two inputs and then enters which is a number of iterations and then raises the result K. That's the the resultant Matrix to which which contains all of the values where we figured out how many iterations it took to see greater than 2 / essentially animators. Okay. So this process starts off by creating a matrix of zeros using the dimensions of see sofas if Caesar 10 x 10, then Z is going to be a 10 by 10 matrix of zeros. And then here's this Loop that's going to essentially just either 8 from one up to the number of iterations. And each time. It goes through. It's just going to take the current values for Z Square them and then add C to them. And then the next time it wraps around it's going to do it's going to update those values. Okay, that's going to use the new Z values to create the next new Z values and so on and so forth. All right. Now we have a little bit of work to do though. This isn't everything. Okay, the role that were operating under here is that we only want to continue to iterate those Z values and there was we only want to keep updating the values in this is ematrix as long as they're less than two. Okay. So we're going to have an illogical rate is going to allow us to do that run to call it active active away is going to be filled with ones and locations for the absolute value of Z, which is the value that's like growing in this sequence right here as long as that value of Z is less than or equal to okay, and then want it switches over to 0 we want that cuz I want it once it exceeds to we want that value inactive to switch from a 120. Okay. So this is what it would look like. Once we we've done that we actually going to do an exercise for part of this in a second. So We start off with our active-matrix being filled basically just all with one same dimensions as C3 as we want to do. This is because we have to do at least one interation to see if the value was going to go from 0 and then Exceed 2. So there's always going to be at least one interation for the sequence to exceed 2. All right, and then inside of our code here in Santa bar Loop, we now have this logical Arabian used to do the appropriate update. So we say take a locations and Z that are currently active Square them and then add to that values for see that are currently active and then overwrite those locations in Z that are currently active and then the active array for the next time around is going to be equal to the absolute value of Z less than or equal to 2. All right. Now the final step we have to make sure that we in here to this rule here. We need to make sure that when this site first becomes inactive when it switches from a 1/2 a zero K. We have to calculate the value of that iteration divided by the total number of iterations K or other words when the when the value and Z exceeds 2K, they have to calculate how many iterations it took for that to occur / and it occurs. We need a store that result into the rez Matrix. Okay, and that's what this one of these two pieces of code does and it's kind of hard to see. I apologize. He slides are posted. By the way, if you want to bring it up one of those two things does that The other one doesn't take a few minutes and see if you can figure out which one of those is going to do that and then we'll talk through it. If you have any questions, I usually just stand here. So, please raise your hand I can help you out. Well, that was a really interesting song. This one. Is it one or two? To explain to me why two is more appropriate than one we both kind of work, but two is the better one. So what it what would the what would the set of conditions be for a site that was? Was acting then it became inactive. Okay. So the active Matrix is keeping track of what sites are currently active and then we have this other Matrix called new active which are the sites that are going to be that are going to stay active for the next round of the Adoration. Okay. And so if a site is currently active it'll have a 1in it in the act of a ray and if it's going to be inactive on the Next Generation that will have a zero in the new active-matrix. It's on order for us to make that VR condition. They have to have a one here and a knot of a 0 over here. And so that's what the condition is active and not new and if that's the case then we're going to update those particular locations in the results Matrix with the current iteration. I divided by the number of iterations. Why does number one sort of work? Philosophy. Yep. So the first one basically saves the number of iterations to exceed 2 - 1 in 2 divided by the number of iterations. All right, because it is once it comes around again and it's now inactive it's not going to update it. Okay, as opposed to the next one. It'll flip that 0 to 1 and I'll leave the current one together and then it will. Let me see here. it might if you just flip these two right here. Yeah, that's a good point. No one's ever brought that up. But yeah, that's a good point. So that would be another way to do it. I'm always used to like in my adoration like doing the output of the loop. So to speak at the very end and doing the Okay, so I think I would probably work. Good morning. Okay, that's what we need to do. We need to make sure that it is logged into the result Matrix. So now we be thrown the that bit of Co down in there taking those two inputs to we talked about and it's going to you know, use that complex grade of values called see now we have to make another function. It's going to essentially create that Matrix e of complex numbers. It's going to call me. I'm about 8 or 8 for a specific number of iterations and then it's going to plot the results in that suit color pot that we saw in like the first light or whatever. This function going to be called Draw mandelbrot. And for this one we essentially want to give it a range of values for which we want to plot the set. Okay. So X-Men x-maxx Wyman WiMAX. We also want to give it a a resolution resolution is important because the higher the resolution in this case were referring to it as the number of boxes in each Direction the higher the resolution the better the picture is going to look. Okay. So as an example here if you have a laptop or a desktop computer at home, if you have a low resolution resolution is usually always into Valley does 1024 x 768. It's basically like the number of Like lines of resolution in each Direction 1024 x 768 is the minimum of like decent Graphics been around for a long time. But the higher you that you make those numbers in the resolution the better the picture is going to appear because you have more fine-grained slices of an image that you can use to present on your screen the issue though with high resolution is it takes more work to do more calculations for each of those little lines of of Graphics or whatever significance difference here. What we're doing if we pick a smaller a high-resolution. So we're going to in this simulation who were going to send a picture higher-resolution to the picture looks nice and then finally have to feed in the number of iterations, which is basically just going to pass directly into the mandelbrot iterate function. Alright, so here's we're going to figure out how we have to calculate the different values for the real and imaginary. No, sorry bout how we calculate see. Okay before we get to that though. This is what the drama Elrod function is going to actually look like we give it that range resolution in the number of iterations. We didn't create see that's what we're going to do in the next slide. Then the mandelbrot iterate function is simply just called with C in the number of iterations as the inputs that provides the result Matrix, which is filled with all of those different number of iterations to exceed 2 / total Renovations. We then send it in the shade in the flat set the color map. Jack which is like different shades of of jet don't even know right? So what you have to do now for this example for this exercise is figure out which one of these boxes is going to correct. Correct? Hold the correct values for see okay in the way that you can test. This is by looking at the set of examples here. So if we put in a Min value for x equal to 6 mm axle a 4 x equals 12 and then resolution of two, we should get X values for 6 + 12 + 612 + resolution of 3 6 9 12. You should look very similar to you for like the lens base function. So you're basically just kind of like coming up with your own living space type function to figure out is how to calculate the the different values for X and Y. Come back that in a second. Okay, one two three. That's the right answer. That's okay. So the issue with the first one is that we don't subtract 1 from the resolution. And so if we were to take the second value here in the rain, which is x max subtract the first Valley the range which is X-Men and this is the first example we would get 6 we divide that by the resolution which there is a two and we need a three and we end up with X values 6 9 12 is opposed to just six and 12. All right. So if we subtract one for the resolution we end up getting an increment for that value of 6 was just gives us 6 + + 6 + 6 is 12 and that's the value that we got. All right. That's why I choose the right answer for this three uses the wrong values for the Calculation of the increment it takes the men and subtracts the max. We don't want to do that. Okay, one of the opposite any questions on this. With this do what we want. This wouldn't believe it or not. Is anybody want does anybody have experience with using a variable? That's the same name as a function? It's not fun. Is it? No actually since the last time that had a variable name called size and then tried to use the size function inside the code and the code just gave this really mysterious like error message. It was like something, you know a size exceeds the Wait, what and then yeah, we had a variable named it over Road the name of that default function. So be careful with that. Okay, just so you know, that's one of the places were actually is too flexible in my opinion compare to that something like C plus plus where is he plus plus has, you know, you can't have a variable name with the same name as a function, but I'm out loud. We just ordered overrides. Okay. So now we have the code here for calculating see you just plug it into wherever we need it in the overall function to do though is we need to make a cool GUI for this but if we were to just take our code as it currently stands and type in draw mandelbrot and then give it a range of values for X from -2.5 + 2.5 y values -2 to resolution of 400, which is a pretty fine grained resolution and then 40 as a total number of iterations. That's the image that pops up that just shows Given all of this code and then that the function for mandelbrot in the rate that shows up and sold out here just to give you a feel for what the date is actually representing. The red regions are the bounded regions. Those are the regions that took basically all 40 iterations to try to exceed the value of 2, but they never did. Okay, but the blue regions of the ones that escaped quickly. Okay, they very quickly went greater than 2 and so they have a relatively small number for For that did the value and then the third dimension? Okay, so you can just a graphical user interface around is called a gooey. So the first function they were going to use to create this is called menu. I can have all sorts of different features and inputs and and configurations and ways to use them. We're just going to use them in a very specific way for this particular example, but if you want to know all the different features for safe, for example, the menu function just open help menu and Matlab will be happy to tell you all of those different things. All right here is with two inputs. The first one is a title string and then a vector called choices and choices here is going to be essentially a vector of strings and what happens here is it's going Create a little window. All right with the title that is inside of title string and then it's going to have a series of buttons in this window. And each of those buttons is going to have a little piece of text sitting on top of it. They correspond to the different strings that are in that choice is Vector. All right, and then when the user clicks on one of those buttons this menu function will evaluate to the number they correspond to the button is clicked. Okay. So here is how we would use this in the new function are called mandelbrot gooey, but we want to focus on down here is how this menu function is being used. All right. So the first input here is a title, so it's going to say which one and you'll see this in a second when I run it. Has the series of choices alright Zoom pan out and quit each of those strings going to sit on top of a button. Like I said when the user clicks on one of those it's going to take you to this next part here in this switch where we it takes that value with rice into the choice variable, which is then used for the switch and then case 1 2 & 3 corresponds to the code. They're going to do for Zoom pan out and quit all rights case 3 by the way quit is the easiest that one just breaks out of the wild Loop. The notice of the wild Loop is an infinite Loop until the user clicks quit and what quit. Is it just breaks out of that Loop and then that is done. The rest of the stuff is how to essentially like what to do for those other two features for zooming and panting. All right. So the first function that we're going to use to help facilitate this zooming in tanning thing is called wait for button press and what it does is literally what that name implies that waits for the button press. All right, so it's not in here. It's going to be inside of one of those functions. So we wait for the button press and what it does is A button press on a mouse. He probably never thought about it this way and actually has two parts to it and we know those two parts are two button press. Yes down and up. All right, so to Matlab a button, press is either of those two things. Alright, so what we do is we're going to call wait for button press and now I just going to sit there and it's going to wait for you to press the mouse button and then I just called get and what it does is it Returns the property name associated with a handle H and easiest way to show you this is an example the handle that were going to use it called GCA. It stands for basically that the current figure this out there as soon as it seems forget current taxis guy. For a specific property name the property in that we're going to use here is current point. So basically what this is going to do with this going to capture the accys for the current point where we click and then the last function that we're going to use as call Darby box and that's what's called the rubber band box in a rubber band box if you've ever like clicked and held and then dragged around on your desktop in Windows or Mac. It's at like stretchy box that comes out from your mouse K by the way, so when you click the button for Zoom now, I was going to wait for you to press down on the mouse. Okay, and once you do press down on the mouse, it's basically going to grab from the it's going to grab the axes of the current point and store those in 2.1 and then RB box is going to turn on an RV box is another one of those waiting for button, press type things. It just sits there and it lets you draw. Rubber band box around on the screen until you eventually let off on the mouse in Canton when that happens. Once you let up on the mouse. It's going to grab from or get from the current Point its axis and store that in 2.2. All right. Now last semester I had an issue with this. Alright the trackpad and I think it's on this device. It didn't register the points properly every time and so what would happen here? Is that .1 and .2 and up being the same thing? All right, and it does happen randomly. At least I perceive it to be randomly like Heisenberg it would just crash right so Hopefully it works when I show the example is work for a while until I got this this thing doesn't work anymore. Alright, the last thing down here is basically saving that set of points .1 Point too into this thing. We're building called a stack right in a stack is kind of like this. You'll talk a lot about stacks and he's 281. It's basically like a memory structure that build up data on top of itself. All right, and so you do the things called pushing and popping values on to a stack this right here is an example of pushing values on to a stack guys kind of like If you're going to like the cafeteria if they still do you use to raise the temperature anymore? I used to but place I guess we have is like stack of plates when you wash a plate and put it on your back. You put it on the top, right and then you add more things new plates. You don't like lift up half the stack and like wedge Inn in the middle. You just you put it on the top and then when you want a new plate, you take it off of the top list of the whole stack in like pull one out of the middle cuz you can't wrap everything. So you always add things to the top and take things off from the top and that's what this memory stack. So to speak is accomplishing for so what we're doing here is we're taking the stack and we're adding a new road to it was saying the stack atro End plus one and then all the columns is going to be equal to essential these for data points, which are going to constitute the range right? So point one at position 1 1 and 2 in position one one are the X-Men in the x max values and then .1 position 1 2 + 2 + position one to both of the Wyman and WiMAX values from the thing that we grabbed up there. Okay. Now pan out. Oh, by the way, I forgot to mention the stack right here. But we do when we actually grabbed the coordinates to sand into sending to draw mandelbrot basically just takes the last row this and send that in for the coordinates. Okay, and then if you do is zoom when you wrap around the new end, which was and force one inside of Zoom is now going to be that new set of coordinates. And so it allows you to like create this stack of different Zoom coordinates and so on and so forth. All right now to let the next thing here is pan out now pan out is a little complex. I'm really only going to focus on though the first part of it. The first part of that basically says that the stack has more than one element in it. You're going to pop off the bottom or the top of the stack everyone visualizes stink up the place example assume that the you put things on the top and you take things off the top in our actual example here in the code rashly adding things to the bottom and taking things off the bottom. But all it says here is take the the current stack and then take rows 1 through the end -1 throw or whatever and then all the columns and then overwrite the stack with that. So basically just popping off or taking off the bottom row of the stack. So the next time you come around and print the end of the stack it's going to be the second to last row. So what this is doing here in this in his first if it's basically tracking back all of the different Zoom levels that you visited on your way down as you were assuming and you'll see this it when I show you the code here in a second swing it works. alright his other part here in the Alice is Basically, just some math it like zoomed out 50% or something like that doesn't matter where it came from. It's what's what it does. All right, so I put it there with you in the class today if you want to take a peek at it. Someone to show you the code so I get out of this startup Matlab. All Matlab is running. I'll go ahead and put that code in there. Is it there already? I can't remember if I put it there yet it already. It's okay. So the code is already in the Google drive under the Matlab stuff folder. You can see it up there. So check it out of here City. All right. So we're going to do mandelbrot GUI. Mando I think Can we go and so now I just ran it and it gave some default inputs. There is the the picture that's the result of calling draw mandelbrot with the default set of values for the range. And then if you can see it up there in the upper left corner, that's our little menu. Alright, I was going to go through a series of different zooms. So I hit Zoom when I hit the zoom that the menu goes away. Okay, and now it's waiting for button press inside of Zoom code, right? So I'm going to go over here to the picture. I'm going to press the button and hopefully it registers properly and all the rubber band box is on. It just captured point one. Now. If I do this, you can see that the rubber band box is on and it has this lovely little glitch and it doesn't redraw the rubber band box. Maybe it's a feature. I don't know. It's basically it's it's not redrawing the figure. Every time I move the rubber band box around so anyways, I started up here. I'm going to move down here to the bottom, right and hopefully when I let go here it's going to capture point to. It did good. Alright, so basically I sent a new X-Men x-maxx Wyman WiMAX using the the point 1.2 inside of the zoom function and I can just keep doing this over and over and over again. I can zoom in on that. Please don't break you'll notice that the the resolution is not as fine-grained as it was before because we're actually starting to reach the limits of what Matlab can represent numerical if you look at the the range here goes from -.945 to -9.25. So we're already in the hundreds here, but nothing in our code for granted us from zooming in farther and farther down. So eventually there was read failed. Thanks Microsoft That's the error message that I added in last semester to show you that the whole thing was just like awesome. Alright, so let me just Close closed. So now I will. Yeah, so that the mantle Rock I'm not sure if that bit of code is in there. But if it is you can look at it now I figured that out. Okay, so I just want to show you if if you go really far into this a little piece of self similarities kind of hard to see cuz I'm not making things exactly square, but it looks like Yeah, that's what he's not. Every number is a good number of iterations either. But if you want to you can play with this stuff and grab the mandelbrot code in play around if you think anyways if you remember the different zoom level that it took for me to get to this when I do pan out now, but pan out to this you see the previous picture pan out again, that's the previous picture that I zoomed in on and then finally this one when the example used to work fine when I didn't have this machine I should have used the Mac if you zoom in to far the range on the bottom of ventrally just becomes the same value and the whole thing is just one big point. So it turns like green or something if you zoom into far. All right, just because of the fact that matt Liv doesn't have enough resolution in its axis. It's just it's a resolution issue member we talked about bits in binary and all that stuff and the same thing goes if you zoom out too far Eventually the picture gets so small that it's not going to print anything because you know, it just disappears. There's a little tiny point is barely like one pixel left and then and then it's and then you can get really far out and it just turns red is blank. So that just shows you the limitations of what we're working with here. Now is actually some cool stuff that I want to show you here. Now that's resolution. I think just show you his is not very good and when working with this but on Wikipedia, if you look up the mandelbrot set there's I think probably still there a series of images that zoom in really really far into the mandelbrot set. So I made a movie to show you about this that Zooms in NFL golf course that's just bounce out of this then go to here. I used to do this by hand, which was hard and then I found a screen capturing tool and screen capture the whole thing. And then you can just watch the video. Some music or something or whatever. so this is the the image that is on Wikipedia obviously got some cool like Glow effect added to it, but then I made these little Zoom transitions in PowerPoint long time ago. And then I just like transition to the various pictures as you zoom into the mandelbrot set. And each of these pictures has a name. I never going deeper in this you can because the resolution is tweaked in a way you can actually see the self-similarity piece showing up and then you have like these spirals are all over the place. Yay. The guy says something in a song I made this song in a program called acid DJ back in the day. I will make you understand. They sell posters in the Pierpont with this mandelbrot set on it every year. the blacklight bongs and stuff instead of Head and Shoulder. It's satellite Head and Shoulder and it said seahorse Valley just like the other one. So these things appear all over the place. So next bit Heroes call to Julia Island Julian here. I never had a Julia which it would have been awesome. But anyways must be like somebody who study this or something and she found her whatever these islands that exist. Just like in these oceans of blue. And they're all over the place, but this is just one of them. Wikipedia Wikipedia I made that song before actually did this. But yeah anyways that was interested in these things and pops up all over the place. But yeah, these images were generated by somebody with a much fancy or simulation program than the one that we just built in like 10 minutes and it just every level of Zoom. It just has that, you know. Took it that far, but there's actually a video on YouTube.